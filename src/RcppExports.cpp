// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// normalize
std::vector<Eigen::MatrixXd> normalize(Eigen::MatrixXd& x, Eigen::VectorXd& y, std::string nnn);
RcppExport SEXP _CDJNC_normalize(SEXP xSEXP, SEXP ySEXP, SEXP nnnSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type nnn(nnnSEXP);
    rcpp_result_gen = Rcpp::wrap(normalize(x, y, nnn));
    return rcpp_result_gen;
END_RCPP
}
// gdata
std::vector<Eigen::MatrixXd> gdata(const int& n, const int& p, const int& K, double sigma, const double& ratio, const int& kind, double rho, const int& seed, const bool& isnorm, std::string nnn, double snr);
RcppExport SEXP _CDJNC_gdata(SEXP nSEXP, SEXP pSEXP, SEXP KSEXP, SEXP sigmaSEXP, SEXP ratioSEXP, SEXP kindSEXP, SEXP rhoSEXP, SEXP seedSEXP, SEXP isnormSEXP, SEXP nnnSEXP, SEXP snrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int& >::type n(nSEXP);
    Rcpp::traits::input_parameter< const int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int& >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< const double& >::type ratio(ratioSEXP);
    Rcpp::traits::input_parameter< const int& >::type kind(kindSEXP);
    Rcpp::traits::input_parameter< double >::type rho(rhoSEXP);
    Rcpp::traits::input_parameter< const int& >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< const bool& >::type isnorm(isnormSEXP);
    Rcpp::traits::input_parameter< std::string >::type nnn(nnnSEXP);
    Rcpp::traits::input_parameter< double >::type snr(snrSEXP);
    rcpp_result_gen = Rcpp::wrap(gdata(n, p, K, sigma, ratio, kind, rho, seed, isnorm, nnn, snr));
    return rcpp_result_gen;
END_RCPP
}
// soft
Eigen::VectorXd soft(Eigen::VectorXd& z, double lambda);
RcppExport SEXP _CDJNC_soft(SEXP zSEXP, SEXP lambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(soft(z, lambda));
    return rcpp_result_gen;
END_RCPP
}
// thresh
Eigen::VectorXd thresh(Eigen::VectorXd& z, double lambda, double gamma, std::string pen);
RcppExport SEXP _CDJNC_thresh(SEXP zSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP penSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type z(zSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< std::string >::type pen(penSEXP);
    rcpp_result_gen = Rcpp::wrap(thresh(z, lambda, gamma, pen));
    return rcpp_result_gen;
END_RCPP
}
// cdj
std::vector<Eigen::VectorXd> cdj(Eigen::MatrixXd& x, Eigen::VectorXd& y, Eigen::VectorXd& beta0, std::string pen, std::string nnn, double la, double ga, double mu, int imax, double tol);
RcppExport SEXP _CDJNC_cdj(SEXP xSEXP, SEXP ySEXP, SEXP beta0SEXP, SEXP penSEXP, SEXP nnnSEXP, SEXP laSEXP, SEXP gaSEXP, SEXP muSEXP, SEXP imaxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type beta0(beta0SEXP);
    Rcpp::traits::input_parameter< std::string >::type pen(penSEXP);
    Rcpp::traits::input_parameter< std::string >::type nnn(nnnSEXP);
    Rcpp::traits::input_parameter< double >::type la(laSEXP);
    Rcpp::traits::input_parameter< double >::type ga(gaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(cdj(x, y, beta0, pen, nnn, la, ga, mu, imax, tol));
    return rcpp_result_gen;
END_RCPP
}
// lamfun
std::vector<Eigen::VectorXd> lamfun(Eigen::MatrixXd& x, Eigen::VectorXd& y, int N, std::string pen, std::string nnn, double Lmin, double tau);
RcppExport SEXP _CDJNC_lamfun(SEXP xSEXP, SEXP ySEXP, SEXP NSEXP, SEXP penSEXP, SEXP nnnSEXP, SEXP LminSEXP, SEXP tauSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< std::string >::type pen(penSEXP);
    Rcpp::traits::input_parameter< std::string >::type nnn(nnnSEXP);
    Rcpp::traits::input_parameter< double >::type Lmin(LminSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    rcpp_result_gen = Rcpp::wrap(lamfun(x, y, N, pen, nnn, Lmin, tau));
    return rcpp_result_gen;
END_RCPP
}
// tune_cdj
std::vector<Eigen::MatrixXd> tune_cdj(Eigen::MatrixXd& x, Eigen::VectorXd& y, std::string pen, std::string nnn, int N, double Lmin, double ga, double mu, int imax, double tol);
RcppExport SEXP _CDJNC_tune_cdj(SEXP xSEXP, SEXP ySEXP, SEXP penSEXP, SEXP nnnSEXP, SEXP NSEXP, SEXP LminSEXP, SEXP gaSEXP, SEXP muSEXP, SEXP imaxSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::MatrixXd& >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd& >::type y(ySEXP);
    Rcpp::traits::input_parameter< std::string >::type pen(penSEXP);
    Rcpp::traits::input_parameter< std::string >::type nnn(nnnSEXP);
    Rcpp::traits::input_parameter< int >::type N(NSEXP);
    Rcpp::traits::input_parameter< double >::type Lmin(LminSEXP);
    Rcpp::traits::input_parameter< double >::type ga(gaSEXP);
    Rcpp::traits::input_parameter< double >::type mu(muSEXP);
    Rcpp::traits::input_parameter< int >::type imax(imaxSEXP);
    Rcpp::traits::input_parameter< double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(tune_cdj(x, y, pen, nnn, N, Lmin, ga, mu, imax, tol));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_CDJNC_normalize", (DL_FUNC) &_CDJNC_normalize, 3},
    {"_CDJNC_gdata", (DL_FUNC) &_CDJNC_gdata, 11},
    {"_CDJNC_soft", (DL_FUNC) &_CDJNC_soft, 2},
    {"_CDJNC_thresh", (DL_FUNC) &_CDJNC_thresh, 4},
    {"_CDJNC_cdj", (DL_FUNC) &_CDJNC_cdj, 10},
    {"_CDJNC_lamfun", (DL_FUNC) &_CDJNC_lamfun, 7},
    {"_CDJNC_tune_cdj", (DL_FUNC) &_CDJNC_tune_cdj, 10},
    {NULL, NULL, 0}
};

RcppExport void R_init_CDJNC(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
